extends ./layout/default.pug

block content
  div(class='container')
    div(id='content_en' class='collapse in')
      h1 #{docs.h1Label}
      p
        strong #{docs.strong1Label}:
        |   #{docs.p1Label}
      code #{docs.code1Label}
      p #{docs.p2Label}
      p #{docs.p3Label}
      p
        strong #{docs.strong2Label}:
        |  #{docs.p4Label}
      code #{docs.code2Label}
      p #{docs.p5Label}
      code #{docs.code3Label}
      p #{docs.p6Label}
      code #{docs.code4Label}
      p #{docs.p7Label}
      p #{docs.p8Label}
      p
        strong #{docs.strong3Label}:
        |  #{docs.p9Label}
      code
        | #{docs.code5Label}
        br
        |  #{docs.code6Label}
        br
        | &nbsp;&nbsp;&nbsp;&nbsp;#{docs.code7Label}
        br
        | #{docs.code8Label}
        br
        | &nbsp;&nbsp;&nbsp;&nbsp;#{docs.code9Label}
        br
        | #{docs.code10Label}
      p #{docs.p10Label}
      p #{docs.p11Label}
      p #{docs.p12Label}
      p #{docs.p13Label}
      code if x < 0 then
      p If you wish to check if the given variable is positive you would use the following code:
      code if 0 < x then
      p
        strong repeat until:
        |  This instruction enables the user repeatly execute part of the code until the condition is met.
      code
        | x := 5;
        br
        | repeat
        br
        | &nbsp;&nbsp;&nbsp;&nbsp;write "In the loop.";
        br
        | &nbsp;&nbsp;&nbsp;&nbsp;x := x - 1;
        br
        | until x = 0
        br
        | write "Exited the loop.";
        br
      p The code above in first instruction places value 5 into variable x. In next line it starts the repeat block. Then message "In the loop." is printed. Variable x is decremented by 1. Then the condition is checked in the until instruction. If value x is not zero the loop is repeated. If value in x is 0 the message "Exited the loop." is printed.
      p Instructions repeat and until should not be followed by a semicolon.
      p Instruction until accepts two conditions. Equals "=" which checks if values compared are equal and less than "<" which checks if first value in comparation is less then the second value in comparation.
      p If you wish to repeat the block until the given variable becomes negative you would use the following code:
      code until x < 0
      p If you wish to repeat the block until the given variable becomes positive you would use the following code:
      code until 0 < x
      p
        strong comments:
        | The sign # is used for comments in the code. Anything between # signs is ignored by mlpl interpreter.
      code
        | #This is a comment.#
        br
        | read x;
        br
        | #This is another
        br
        | comment spanning
        br
        | multiple lines.#
        br
        | write x
      p
        strong arithmetic operations:
        | Basic arithmetic operations are supported. Arithmetic operations are supported only on integeres.
      p Assigment
      code x := 2;
      p Code above assign number 2 to variable x.
      p Addition
      code y := x + 1;
      p Previous instruction takes value from x adds 1 to it and store results in y.
      p Substration
      code y := y - 1;
      p Previous instruction takes value from y substract 1 from it and store results in y.
      p Multiplication
      code x := 2 * 3;
      p Previous instruction takes multiply 2 with 3 and stores result in x.
      p Division
      code z := x / y;
      p Previous instruction takes value from x divide it by value taken from y and store results in z.